:css
  span.small { font-size: 0.8em }
  span.email { text-transform: lowercase !important }
  textarea.form-control { height: 200px; max-height: 200px }
  #edit-panel, #format-panel { height: 240px; max-height: 240px; overflow: scroll }
  .jobber-link, .phone-link, .email-link {cursor: pointer }
  a.email-link { display: block; }
  @media (max-width: 700px) {
    .glyphicon-envelope, .glyphicon-phone-alt { font-size: 2em;}
    .phone, span.email { position: relative; top: -5px}
  }
  @media (max-width: 480px){
    .ellipsis {
      text-overflow: ellipsis;

      /* Required for text-overflow to do anything */
      white-space: nowrap;
      overflow: hidden;
    }
  }

  .tt-dropdown-menu {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    background-color: white;
    width: 170px;
    min-height: 75px;
    max-height: 150px;
    overflow-y: auto;
  }
  .tt-dataset-jobs {
  }
  span.tt-suggestions {
  }
  .tt-suggestion {
    padding: 0 3px 3px 3px;
  }
  .tt-cursor {
    background-color: #ED834E;
    color: #595643;
  }

  .message-body { height: 200px; max-height: 200px; overflow: scroll; margin-top: 10px }


.container-fluid
  .row
    .col-lg-12

      / = link_to 'Ny besked', new_message_path, class: 'btn btn-primary'
      - unless params[:all]=='true'
        %h3 Åbne dialoger
        = link_to 'Besvarede', messages_path(all: true), class: 'btn btn-primary'
      - else
        %h3 Besvarede dialoger
        = link_to 'Åbne', messages_path, class: 'btn btn-primary'

  .row
    - count = 0; message_stacks=[[],[],[]]; @messages.each{ |j| message_stacks[ (count += 1) % 3 ] << j  }
    - message_stacks.each do |message_stack|
      .col-lg-4
        .list-group
          - message_stack.each do |message|
            .list-group-item{ id: "message_item_#{message.id}"}
              .row-picture
                %a.message-link{ :"data-toggle"=> "modal", :"data-target"=> "#messageCard", :"data-message-id"=>"#{message.id}" }
                  %img.circle{ src: "http://lorempixel.com/56/56/people/1", alt:"icon", title: "#{message.created_at.strftime "%d/%m/%Y"}"}

              .row-content
                %a.message-link{ :"data-toggle"=> "modal", :"data-target"=> "#messageCard", :"data-message-id"=>"#{message.id}" }
                  %h5.list-group-item-heading= message.title
                %p.list-group-item-text
                  = message.created_at.strftime "%d/%m/%Y"

                  %a.ellipsis.email-link{ title: "#{message.msg_from}", :"data-toggle"=> "modal", :"data-target"=> "#newMessage", :"data-message-id" => "#{message.id}" }
                    %span.glyphicon.glyphicon-envelope{ :"aria-hidden"=>"true"}
                    %span.email
                      =message.msg_from.downcase

              .list-group-separator


  #newMessage.modal.fade{ tabindex:"-1", role:"dialog", :"aria-labelledby"=>"messageTitle", :"aria-hidden"=>"true" }
    .modal-dialog
      .modal-content
        .modal-header
          %button{ type:"button", class:"close", :"data-dismiss"=>"modal", :"aria-label"=>"Close"}
            %span{ :"aria-hidden"=>"true"} &times;
          %h4.modal-title{ id: "messageTitle"}	Ny besked

        .modal-body
          .message-body.well

          %form
            .form-group
              %input{ type:"hidden", id:"message_job_offer_id", name: "message[job_offer_id]"}
              %input.from{ type:"hidden", class:"form-control", name: "message[msg_from]", id:"message_msg_from"}
              %input.original_id{ type:"hidden", class:"form-control", name: "message[original_id]", id:"message_original_id"}

            .form-group
              .checkbox
                %label{ style: "left: -17px"}
                  %input.original{ type:"checkbox", class:"form-control", name: "message[original]", id:"message_original"}
                  Inkludér oprindelig meddelelse

            .form-group
              %label{ for:"message_msg_to", class:"control-label"} Til:
              %input.from-to{ type:"text", class:"form-control", name: "message[msg_to]", id:"message_msg_to"}
            .form-group
              %label{ for:"message_title", class:"control-label"} Emne:
              %input.subject{ type:"text", class:"form-control", id:"message_title", name: "message[title]"}

            #job_offer.form-group
              %label{ for:"message_title", class:"control-label"} Jobforslag:
              %input{ placeholder: "søg...", type:"text", class:"form-control typeahead", autocomplete: 'off', :"data-items"=>"3", id:"message_job_offer", name: "message[job_offer]"}
            .form-group
              %a.link-edit-panel.btn.btn-default{ href: "#"} Redigér
              %a.link-format-panel.btn.btn-primary{ href: "#" } Vis formateret
              #edit-panel.well{ style: "margin-top: 10px"}
                %textarea{ class:"form-control", id:"message_body", name: "message[body]"}
                %span.small
                  skriv {{jobbet}} hvis du vil nævne jobbet, og brug
                  %a{ href: "https://en.wikipedia.org/wiki/Markdown", target: "_blank"} Markdown
                  til at formatere teksten

              #format-panel.well{ style: "margin-top: 10px"}

        .modal-footer
          %button.btn.btn-default{ type:"button", :"data-dismiss"=>"modal"} Fortryd
          %button.btn.btn-primary{ type:"button", id: "send_message"} Send

  :coffeescript

    updateModal = (form,data) ->
      modal = $(form)
      modal.find('#messageTitle').text(data.title)
      modal.find('.message-body').html(data.body)
      modal.find('.modal-body input.from').val(data.msg_to)
      modal.find('.modal-body input.original_id').val(data.id)
      modal.find('.modal-body input.from-to').val(data.msg_from)
      modal.find('.modal-body input.subject').val(data.title)

    $('a.link-edit-panel').on 'click', () ->
    	$('#edit-panel').show()
    	$('#format-panel').hide()

    $('a.link-format-panel').on 'click', () ->
    	$('#edit-panel').hide()
    	$('#format-panel').show()
    	request = $.ajax
    		url: '/messages/format',
    		type: "get",
    		data: $('#message_body').serialize()

    	# callback handler that will be called on success
    	request.done (response, textStatus, jqXHR) ->
    		$('#format-panel').html(response)

    newMessage = () ->
    	$form = $('#newMessage')
    	# let's select and cache all the fields
    	$inputs = $form.find "input, select, button, textarea"

    	# serialize the data in the form
    	serializedData = $inputs.serialize()

    	# let's disable the inputs for the duration of the ajax request
    	# Note: we disable elements AFTER the form data has been serialized.
    	# Disabled form elements will not be serialized.
    	$inputs.prop("disabled", true)

    	# fire off the request to /form.php
    	request = $.ajax
    		url: '/messages.js',
    		type: "post",
    		data: serializedData

    	# callback handler that will be called on success
    	request.done (response, textStatus, jqXHR) ->
    		# log a message to the console
    		swal "Perfekt!", "Der er sendt en besked :)", 'success'

    	# callback handler that will be called on failure
    	request.fail (jqXHR, textStatus, errorThrown) ->
    		# log the error to the console
    		swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'

    	# callback handler that will be called regardless
    	# if the request failed or succeeded
    	request.always () ->
    		#reenable the inputs
    		$('#newMessage').hide()
    		$inputs.prop "disabled", false

    $('#newMessage').on 'show.bs.modal', (event) ->

      $form = $('#newMessage')
      $('#format-panel').hide()
      button = $(event.relatedTarget)
      messageId = button.data('message-id')
      url = '/messages/' + messageId + '.json'

      # fire off the request to the server
      request = $.getJSON url

      # callback handler that will be called on success
      request.done (response, textStatus, jqXHR) ->
        updateModal $form,jqXHR.responseJSON

      # callback handler that will be called on failure
      request.fail (jqXHR, textStatus, errorThrown) ->
        # log the error to the console
        swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'

      # callback handler that will be called regardless
      # if the request failed or succeeded
      request.always () ->
        #reenable the inputs
        $inputs.prop "disabled", false

    $('#send_message').on 'click', (e) ->
    	newMessage()

  :javascript
    var jobs = new Bloodhound({
      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      limit: 25,
      prefetch: '/jobs.json',
      remote: '/jobs.json?q=%QUERY'
    });

    // kicks off the loading/processing of `local` and `prefetch`
    jobs.initialize();

    // passing in `null` for the `options` arguments will result in the default
    // options being used
    $('.typeahead').typeahead(null, {
      name: 'jobs',
      displayKey: 'name',
    	templates: {
        empty: [
          '<div class="empty-message">',
          'Der var ingen jobs, der matcher det indtastede!',
          '</div>'
        ].join('\n'),
        suggestion: Handlebars.compile('<p><strong>{{name}}</strong></p>')
      },
      // `ttAdapter` wraps the suggestion engine in an adapter that
      // is compatible with the typeahead jQuery plugin
      source: jobs.ttAdapter()
    });

    $('.typeahead').on('typeahead:selected', function(event, selection) {
    	$('#message_job_offer_id').val(selection.id);
    });
