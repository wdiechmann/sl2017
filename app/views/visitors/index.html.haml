!!!
/
/ if template should build with Open Graph Protocol (opg.me)
/
/[if lt IE 7] <html.no-js lt-ie10 lt-ie9 lt-ie8 lt-ie7" lang="dk" prefix="og: http://ogp.me/ns#">
/[if IE 7] <html.no-js lt-ie10 lt-ie9 lt-ie8" lang="dk" prefix="og: http://ogp.me/ns#">
/[if IE 8] <html.no-js lt-ie10 lt-ie9 " lang="dk" prefix="og: http://ogp.me/ns#">
/[if IE 9] <html.no-js lt-ie10" lang="dk" prefix="og: http://ogp.me/ns#">
/[if gt IE 9]><!
%html.no-js{lang: 'dk'}
	/ <![endif]>
	%head
		- current = 'ingen'
		= render 'layouts/head'
		:css
			.tk-proxima-nova{font-family:"proxima-nova",sans-serif;}
			.simple_form { margin-top: 20px;}
			h3 strong { color: green; }
			form .form-control { height: 50px;}
			.navbar-collapse ul.nav li a { border: 0px;}
			.scroll-btn a { background-color: transparent;}
			.job-wrapper {
				width: 45%;
				margin: 5px;
				float: left;
			}
			.job-section {
				border-radius: 3px;
				padding: 3px;
				background-color: #EDF6EE;
			}
			.job-title {
				font-size: 10px;
			}
			.job-description {
				font-size: 9px;
			}
			.job-location { font-size: 8px;}
			.job-schedule { font-size: 8px;}
			#masonry-container {
				background: #FFF;
				padding: 5px;
				margin-bottom: 20px;
				border-radius: 5px;
				clear: both;
				-webkit-border-radius: 5px;
					-moz-border-radius: 5px;
								border-radius: 5px;
			}

			.clearfix:before, .clearfix:after { content: ""; display: table; }
			.clearfix:after { clear: both; }
			.clearfix { zoom: 1; }

			.col1 { width: 80px; }
			.col2 { width: 180px; }
			.col3 { width: 280px; }
			.col3 { width: 240px; }
			.col4 { width: 380px; }
			.col5 { width: 480px; }

			.col1 img { max-width: 80px; }
			.col2 img { max-width: 180px; }
			.col3 img { max-width: 280px; }
			.col4 img { max-width: 380px; }
			.col5 img { max-width: 480px; }

			.box {
				text-align: left
			}

			.green-box {
				color: white;
				background-color: green;
				font-size: 1.2em;
				text-align: left;
				padding: 10px;
			}


	%body
		= render partial: 'layouts/navbar', locals: {current: current}

		= render 'layouts/messages'

		%section.header-10-sub.v-center{ style: "height: 1090px; background-position: 50% 0px;"}
			.background{ style: "background-position: 50% 0px; width: 112%"}
			%div
				.container
					.hero-unit
						%h1= t('visitor.lending_a_hand')
						%p= t('visitor.hero_p1')
			%span.scroll-btn
				%a{href:"#"}
					%span.mouse
						%span

		/ jobber intro
		%section#jobber.content-7.v-center.ani-processed{ style: "opacity: 1;"}
			%a{ name: "jobform"}
			%div
				.container
					%h3= t('visitor.jobintro_h3_html')

					.row.v-center
						.col-sm-3
							%h6= t('visitor.jobintro_target_h6')
							%p= t('visitor.jobintro_p1')

							%h6= t('visitor.jobintro_task_h6')
							%p= t('visitor.jobintro_p2')

							%h6= t('visitor.jobintro_demands_h6')
							%p= t('visitor.jobintro_p3')

						.col-sm-6
							%img{src: asset_url("jobbere.jpg")}
							= simple_form_for(@jobber) do |f|
								= f.error_notification



								.form-inputs
									.form-group.jobber_job_group{ style: 'display: none'}
										= f.label :job_name
										= f.hidden_field :job_id
										= f.text_field :job_name, :autofocus => true, class: 'form-control '

									.form-group
										= f.label :name
										= f.text_field :name, :autofocus => true, class: 'form-control ', placeholder: "Søren Spejdersen"
										= f.error :name

									.form-group
										= f.label :street
										= f.text_field :street, :autofocus => true, class: 'form-control ', placeholder: "Pladsen 2"
										= f.error :street

									.form-group
										= f.label :zip_city
										= f.text_field :zip_city, :autofocus => true, class: 'form-control ', placeholder: "6000 Sønderborg"
										= f.error :zip_city

									.form-group
										= f.label :phone_number
										= f.text_field :phone_number, :autofocus => true, class: 'form-control ', placeholder: "+45 12345678"
										= f.error :phone_number

									.form-group
										= f.label :email
										= f.text_field :email, :autofocus => true, class: 'form-control ', placeholder: "soren@spejder.liv"
										= f.error :email


								.form-actions
									%button.jobber-registration.form-control.btn.btn-success{ type: 'submit' }= t('visitor.submit_jobber_form')

							%p
								%small Du kan forvente at vi kontakter dig så snart, vi har nyt om mulighederne for jobbere på SL2017.
								%br
								%small - vi forventer at være klar i løbet af februar 2015.

						.col-sm-3
							.span3.offset1
								%h6= t('visitor.jobform_info_h6')
								%p= t('visitor.jobform_info_p1')


								%h5= t('visitor.jobform_info_h5_name')
								%p= t('visitor.jobform_info_p2')
								%p

								%h5= t('visitor.jobform_info_h5_adr')
								%p= t('visitor.jobform_info_p3')

								%h5= t('visitor.jobform_info_h5_cell')
								%p= t('visitor.jobform_info_p4')

								%h5= t('visitor.jobform_info_h5_email')
								%p= t('visitor.jobform_info_p5')

		/ vacancies
		%section#jobs.content-7.v-center.ani-processed{ style: "opacity: 1;"}
			- jobcount = Job.all.vacancies(Date.today).count

			%div
				.container
					.col12
						%h3= t('visitor.vacancies_h3_html')
					.col12
						- if jobcount < 1
							%h4= t('visitor.nojob_list_h4')
						- else
							%h4= t('visitor.joblist_h4', jobcount: (jobcount==1 ? t('visitor.one_job') : (jobcount>20 ? t('visitor.some_jobs', jobcount: jobcount) : t('visitor.all_jobs', jobcount: jobcount))))

					.col12

						/ .job-listings{ style: "clear: both"}
						#masonry-container.job-listings.transitions-enabled.infinite-scroll.clearfix

							.job-wrapper
								.job-section.col3.box.stamp
									.job-title
										%b= t('visitor.what_job')
									.job-description= t('visitor.jobbing_now')


							.job-wrapper
								.job-section.col3.box.stamp
									.job-title
										%b= t('visitor.job_what_to_do')
									.job-description
										%p= t('visitor.job_detail_p1')
										%p
											%a.btn.btn-success{:href => "#jobform", :"data-section" => "jobber", style: "color: white" }= t('visitor.goto_jobber_form')

							- if jobcount < 1
								.job-wrapper
									.job-section.col5.box.stamp.green-box= t('visitor.no_jobs_msg_html')
							- else
								- Job.all.vacancies(Date.today).limit(20).each do |job|
									.job-wrapper
										.job-section.col3.box
											.job-title
												%b= job.name
											.job-description
												= job.description
											.job-location
												%b hvor
												= job.location
											.job-schedule
												%b hvornår
												= job.schedule
											%p
												%a.btn.job-btn.btn-success{:href => "#jobform", :"data-job-name" => "#{job.name}", :"data-job-id" => "#{job.id}", :"data-section" => "jobber", style: "color: white" }= get_random_label



		/ about the camp
		%section.content-23.v-center.custom-bg#about{ style: "background-position: 50% 0px; width: 112%"}
			%div
				.container
					.hero-unit.hero-unit-bordered
						%h1= t('visitor.about_hero_h1')
			%a.control-btn{ href: "#"}
				%span.glyphicon.glyphicon-chevron-down

		/
		%section.content-23.v-center#about_2{ style: "background-position: 50% 0px; width: 112%"}
			%div
				.container
					.row
						.col-sm-4{style: "height:200px"}
					.row
						.col-sm-12
							%h1= t('visitor.about_all_h1')
					.row
						.col-sm-4
							%p= t('visitor.about_location')

						.col-sm-4
							%p= t('visitor.about_corpses')
						.col-sm-4
				%p
				%img{ src: asset_url("banner.jpg")}
				%p
				.container
					.row
						.col-sm-4
							%p
						.col-sm-4
							%p= t('visitor.about_when')
						.col-sm-4
							%p= t('visitor.about_pioner')
					.row
						.col-sm-4{style: "height:400px"}


		/ footer-3
		%footer.footer-3
			.container
				.row.v-center
					.col-sm-8
						%a.brand{ href: "#"} Spejdernes Lejr 2017
				.row
					.col-sm-8.user_sign_in{ style: "height: 40px;"}
					.col-sm-4{style: "bottom: 0px"}
						%p.small
							made by
							%a{ href: "http://twitter.com/wdiechmann", target: "_blank"} wdiechmann
							%br
							powered by
							%a{ href: "http://alco.dk", target: "_blank"} ALCO Company

		= javascript_include_tag 'application'

		:coffeescript

			$('.btn.job-btn').on 'click', (event) ->
				$('#jobber_job_id').val($(this).data('job-id'))
				$('#jobber_job_name').val($(this).data('job-name'))
				$('.jobber_job_group').show()

			userSignIn = () ->
				$('.user_sign_in').on 'click', (event) ->
					window.location.href = '/users/sign_in'

			newMessage = () ->
				request = null
				$('button.new_message').on 'click', (event) =>
					# abort any pending request
					event.preventDefault()
					if request
						request.abort()

					# setup some local variables
					$form = $('#new_message')
					# let's select and cache all the fields
					$inputs = $form.find "input, select, button, textarea"

					# serialize the data in the form
					serializedData = $form.serialize()

					# let's disable the inputs for the duration of the ajax request
					# Note: we disable elements AFTER the form data has been serialized.
					# Disabled form elements will not be serialized.
					$inputs.prop("disabled", true)

					# fire off the request to /form.php
					request = $.ajax
						url: '/messages.js',
						type: "post",
						data: serializedData

					# callback handler that will be called on success
					request.done (response, textStatus, jqXHR) ->
						# log a message to the console
						swal "Tak!", "Vi har modtaget din besked - og sendt dig en kopi pr email :)", 'success'

					# callback handler that will be called on failure
					request.fail (jqXHR, textStatus, errorThrown) ->
						# log the error to the console
						swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'

					# callback handler that will be called regardless
					# if the request failed or succeeded
					request.always () ->
						#reenable the inputs
						$inputs.prop "disabled", false

					# prevent default posting of form
					event.preventDefault()

			jobberRegistration = () ->
				request = null
				$('button.jobber-registration').on 'click', (event) =>
					# abort any pending request
					event.preventDefault()
					if request
						request.abort()

					# setup some local variables
					$form = $('#new_jobber')
					# let's select and cache all the fields
					$inputs = $form.find "input, select, button, textarea"

					# serialize the data in the form
					serializedData = $form.serialize()

					# let's disable the inputs for the duration of the ajax request
					# Note: we disable elements AFTER the form data has been serialized.
					# Disabled form elements will not be serialized.
					$inputs.prop("disabled", true)

					# fire off the request to /form.php
					request = $.ajax
						url: '/jobbers.js',
						type: "post",
						data: serializedData

					# callback handler that will be called on success
					request.done (response, textStatus, jqXHR) ->
						# log a message to the console
						swal "Tak!", "Vi har modtaget din tilmelding - og sendt dig en email :)", 'success'

					# callback handler that will be called on failure
					request.fail (jqXHR, textStatus, errorThrown) ->
						# log the error to the console
						swal "ØV!", "Noget er gået galt \n Fejlen: " + textStatus + ' ' + errorThrown, 'error'

					# callback handler that will be called regardless
					# if the request failed or succeeded
					request.always () ->
						#reenable the inputs
						$inputs.prop "disabled", false

					# prevent default posting of form
					event.preventDefault()

			$(document).on 'ready page:load', ->
				pageOnLoad()
				newMessage()
				jobberRegistration()
				userSignIn()
				msg = $('#flash_notice').html()
				if msg
					swal 'Super!', msg, 'success'

		:javascript

			function fadedEls(el, shift) {
			    el.css('opacity', 0);
			    switch (shift) {
			        case undefined: shift = 0;
			        break;
			        case 'h': shift = el.eq(0).outerHeight();
			        break;
			        case 'h/2': shift = el.eq(0).outerHeight() / 2;
			        break;
			    }
			    $(window).resize(function() {
			        if (!el.hasClass('ani-processed')) {
			            el.eq(0).data('scrollPos', el.eq(0).offset().top - $(window).height() + shift);
			        }
			    }).scroll(function() {
			        if (!el.hasClass('ani-processed')) {
			            if ($(window).scrollTop() >= el.eq(0).data('scrollPos')) {
			                el.addClass('ani-processed');
			                el.each(function(idx) {
			                    $(this).delay(idx * 200).animate({
			                        opacity : 1
			                    }, 1000);
			                });
			            }
			        }
			    });
			};

			function collapseMenu(e){
				$(e).closest('.collapse').removeClass('in');
			}

			function scrollToSection(e){
				$.scrollTo($('#' + $(e).data('section')), {
					axis : 'y',
					duration : 500
				})
			}

			function pageOnLoad(){
					var isMobile = {
					    Android: function() {
					        return navigator.userAgent.match(/Android/i);
					    },
					    BlackBerry: function() {
					        return navigator.userAgent.match(/BlackBerry/i);
					    },
					    iOS: function() {
					        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
					    },
					    Opera: function() {
					        return navigator.userAgent.match(/Opera Mini/i);
					    },
					    Windows: function() {
					        return navigator.userAgent.match(/IEMobile/i);
					    },
					    any: function() {
					        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
					    }
					};

					$('.header-10-sub .scroll-btn a,a.control-btn').on('click', function(e) {
						e.preventDefault();
						$.scrollTo($(this).closest('section').next(), {
						    axis : 'y',
						    duration : 500
						});
						return false;
					});
					$('.nav').find('a.sect').on('click', function(e) {
					    e.preventDefault();
							elem=this
							$.when(scrollToSection(elem)).done(collapseMenu(elem));
					});

					// Sections height & scrolling
					$(window).resize(function() {
					    var sH = $(window).height();
					    $('section.header-10-sub').css('height', (sH + 'px'));
					});

					// Parallax
					if(!isMobile.any()) {
					    $('.header-10-sub,.header-10-sub .background').each(function() {
					        $(this).parallax('50%', -0.3, false);
					    });

					    $('.content-23:not(.custom-bg)').each(function() {
					        $(this).parallax('50%', 0.3, false);
					    });

					    $('.content-23.custom-bg2').css({
					        backgroundAttachment: 'fixed'
					    });
					};

					if(!isMobile.any()) {
					    // Faded elements
					    // fadedEls($('.content-7'), 300);
					    // fadedEls($('.content-8'), 300);
					};

					(function(el) {
					    el.css('left', '-100%');
					    $(window).resize(function() {
					        if (!el.hasClass('ani-processed') && el.length > 0) {
					            el.data('scrollPos', el.offset().top - $(window).height() + el.outerHeight());
					        }
					    }).scroll(function() {
					        if (!el.hasClass('ani-processed')) {
					            if ($(window).scrollTop() >= el.data('scrollPos')) {
					                el.addClass('ani-processed');
					                el.animate({
					                    left : 0
					                }, 500);
					            }
					        }
					    });
					})($('.content-13 > .container'));

					$(window).resize().scroll();

					// Masonry
					$('#masonry-container').masonry({
						itemSelector: '.box',
						// set columnWidth a fraction of the container width
						// columnWidth: function( containerWidth ) {
						//	return containerWidth / 2;
						// },
						// columnWidth: 100,
						isAnimated: true,
						gutterWidth: 5
					});


					// Carousel
					(function(el){
						$(window).resize(function() {
							shift = el.eq(0).outerHeight() /10;
						if (!el.hasClass('ani-processed') && el.length > 0) {
							el.eq(0).data('scrollPos', el.eq(0).offset().top - $(window).height() + shift);
						}
						}).scroll(function() {
							if (!el.hasClass('ani-processed')) {
								if ($(window).scrollTop() >= el.eq(0).data('scrollPos')) {
									el.addClass('ani-processed');
									function carouselAnimation(){
										el.css('top', '0');
										var imgHeight = el.height();
										var lastPoint = imgHeight - 448*2;
										var intervalID = setInterval(function(){
											el.animate({
												top: (el.css('top').slice(0, -2)) - 402
											}, {
												duration: 1000,
												easing: "easeInOutSine"
											});
											console.log((-(el.css('top').slice(0, -2))), lastPoint);
											if (-(el.css('top').slice(0, -2)) >= lastPoint){
												clearInterval(intervalID);
												setTimeout(function(){
													el.animate({
												  	top: 0
												  }, {
														duration: 1000,
														easing: "easeInOutSine",
														complete: carouselAnimation
													});
												}, 3000)
											}
										}, 2000);
									}
									carouselAnimation();
								}
							}
						});
					})($('.screen-custom img'));
			}

			(function($) {
				$(function() {
				});
			})(jQuery);
