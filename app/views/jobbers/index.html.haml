:css
	span.small { font-size: 0.8em }
	span.email { text-transform: lowercase !important }
	textarea.form-control { height: 200px; max-height: 200px }
	#edit-panel, #format-panel { height: 240px; max-height: 240px; overflow: scroll }
	.jobber-link, .phone-link, .email-link {cursor: pointer }
	a.email-link { display: block; }
	@media (max-width: 700px) {
		.glyphicon-envelope, .glyphicon-phone-alt { font-size: 2em;}
		.phone, span.email { position: relative; top: -5px}
	}
	@media (max-width: 480px){
		.ellipsis {
		  text-overflow: ellipsis;

		  /* Required for text-overflow to do anything */
		  white-space: nowrap;
		  overflow: hidden;
		}
		button.cancel_park {
			margin-bottom: 10px;
		}
	}

	.tt-dropdown-menu {
		box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
		background-color: white;
		width: 170px;
		min-height: 75px;
		max-height: 150px;
		overflow-y: auto;
	}
	.tt-dataset-jobs {
	}
	span.tt-suggestions {
	}
	.tt-suggestion {
		padding: 0 3px 3px 3px;
	}
	.tt-cursor {
		background-color: #ED834E;
		color: #595643;
	}

.container-fluid
	.row
		.col-lg-12
			%h3 Oversigt over jobbere

			= link_to 'Ny jobber', new_jobber_path, class: 'btn btn-success'


			.row-action-primary.checkbox
				%label
					%input{ type:"checkbox"}
				Jobbere med en checkbox i stedet for en 'avatar' har ikke bekræftet deres interesse tilkendegivelse. Du kan bekræfte den ved at klikke i checkboxen - men vær nu sikker på at jobberens email virker!

			%h3
				&nbsp;


	.row
		.col-md-12
			%form.form-inline{ action: "/jobbers", method: "get"}
				.form-group
					%label{ for: "q" }
					%input.form-control{ type: "text", id: "q", name: "q", placeholder: "Søg i navn, gade, by, tlf og email" }
				%button.btn.btn-primary{ type: "submit"} Søg
	.row
		.col-md-12
			&nbsp;

	.row
		- count = 0; jobstacks=[[],[],[]]; @jobbers.each{ |j| jobstacks[ (count += 1) % 3 ] << j  }
		- jobstacks.each do |jobstack|
			.col-lg-4
				%ul.list-group
					- jobstack.each do |jobber|
						%li{ id: "jobber_item_#{jobber.id}", class: "#{aged_class jobber} list-group-item"}
							- unless jobber.confirmed_at.nil?
								.row-picture
									%a.jobber-link{ :"data-toggle"=> "modal", :"data-target"=> "#jobberCard", :"data-jobber-id"=>"#{jobber.id}" }
										%img.circle{ src: "http://lorempixel.com/56/56/people/1", alt:"icon", title: "#{jobber.confirmed_at.strftime "%d/%m/%Y"}"}
							- else
								.row-action-primary.checkbox.confirmation{ id: "jobber_col1_#{jobber.id}"}
									%label
										%input{ type:"checkbox", value: "#{jobber.id}"}

							.row-content
								%h4.list-group-item-heading
									%a.jobber-link{ :"data-toggle"=> "modal", :"data-target"=> "#jobberCard", :"data-jobber-id"=>"#{jobber.id}" }
										= jobber.name
									%a.park_jobber{ :"data-toggle"=> "modal", :"data-target"=> "#parkModal", style: "float: right", :"data-jobber-id"=>"#{jobber.id}"}
										%span.glyphicon.glyphicon-time{style: "float: right"}

								%p.list-group-item-text
									%a.phone-link{ title: "#{jobber.phone_number}", :"data-toggle"=> "modal", :"data-target"=> "#newCall", :"data-recipient"=>"#{jobber.phone_number}" }
										%span.glyphicon.glyphicon-phone-alt{ :"aria-hidden"=>"true", title: "#{jobber.phone_number}"}
										%span.phone
											= jobber.phone_number

									%a.ellipsis.email-link{ title: "#{jobber.email}", :"data-toggle"=> "modal", :"data-target"=> "#newMessage", :"data-recipient"=>"#{jobber.email}" }
										%span.glyphicon.glyphicon-envelope{ :"aria-hidden"=>"true"}
										%span.email
											=jobber.email.downcase.gsub(/@/,' at ')

						.list-group-separator



	#jobberCard.modal.fade{ tabindex:"-1", role:"dialog", :"aria-labelledby"=>"jobberTitle", :"aria-hidden"=>"true" }
		.modal-dialog
			.modal-content
				.modal-header
					%button{ type:"button", class:"close", :"data-dismiss"=>"modal", :"aria-label"=>"Close"}
						%span{ :"aria-hidden"=>"true"} &times;
					%h4.modal-title{ id: "jobberTitle"}	Jobber

				.modal-body
					.well

				.modal-footer
					/= link_to(@jobber, :method => :delete, class: ' btn btn-danger btn-small', :data => { :confirm => 'Er du sikker?' }) do
					/	%span.glyphicon.glyphicon-trash{:"aria-hidden"=>"true"}

					%button.btn.btn-default{ type:"button", :"data-dismiss"=>"modal"} Fortryd
					%button.btn.btn-primary{ type:"button", id: "save_jobber"} Luk


	#newCall.modal.fade{ tabindex:"-1", role:"dialog", :"aria-labelledby"=>"callTitle", :"aria-hidden"=>"true" }
		.modal-dialog
			.modal-content
				.modal-header
					%button{ type:"button", class:"close", :"data-dismiss"=>"modal", :"aria-label"=>"Close"}
						%span{ :"aria-hidden"=>"true"} &times;
					%h4.modal-title{ id: "callTitle"}	Ny tlf samtale

				.modal-body
					%form

						.form-group
							%textarea{ class:"form-control", id:"message_body", name: "message[body]"}

				.modal-footer
					%button.btn.btn-default{ type:"button", :"data-dismiss"=>"modal"} Fortryd
					%button.btn.btn-primary{ type:"button", id: "save_comment"} Gem

	#parkModal.modal.fade{ tabindex:"-1", role:"dialog", :"aria-labelledby"=>"parkTitle", :"aria-hidden"=>"true" }
		.modal-dialog
			.modal-content
				.modal-header
					%button{ type:"button", class:"close", :"data-dismiss"=>"modal", :"aria-label"=>"Close"}
						%span{ :"aria-hidden"=>"true"} &times;
					%h4.modal-title{ id: "parkTitle"}	Parkér jobberen

				.modal-body
					%form

						.form-group
							%label{ for:"jobber_next_contact_at", class:"control-label"} Parkér indtil:
							%input.park-until{ type:"text", class:"form-control", name: "jobber[next_contact_at]", id:"jobber_next_contact_at", placeholder: 'dd-mm-åååå'}

				.modal-footer{ style: 'padding-top: 5px;'}
					.buttons{ style: 'width: 50%; float: right'}
						%button.cancel_park.btn.btn-default{ type:"button", :"data-dismiss"=>"modal" } Fortryd
						%button.btn.btn-primary{ type:"button", id: "set_parkometer"} Parkér
					.note{ style: 'width:50%; float: right'} campOS lægger en frisk dialog frem når tid er - lige til at bide i for dig ;)


	#newMessage.modal.fade{ tabindex:"-1", role:"dialog", :"aria-labelledby"=>"messageTitle", :"aria-hidden"=>"true" }
		.modal-dialog
			.modal-content
				.modal-header
					%button{ type:"button", class:"close", :"data-dismiss"=>"modal", :"aria-label"=>"Close"}
						%span{ :"aria-hidden"=>"true"} &times;
					%h4.modal-title{ id: "messageTitle"}	Ny besked

				.modal-body
					%form
						%input{ type:"hidden", id:"message_job_offer_id", name: "message[job_offer_id]"}
						.form-group
							%label{ for:"message_msg_to", class:"control-label"} Til:
							%input.msg-to{ type:"text", class:"form-control", name: "message[msg_to]", id:"message_msg_to"}
						.form-group
							%label{ for:"message_title", class:"control-label"} Emne:
							%input{ type:"text", class:"form-control", id:"message_title", name: "message[title]"}
						#job_offer.form-group
							%label{ for:"message_title", class:"control-label"} Jobforslag:
							%input{ placeholder: "søg...", type:"text", class:"form-control typeahead", autocomplete: 'off', :"data-items"=>"3", id:"message_job_offer", name: "message[job_offer]"}
						.form-group
							%a.link-edit-panel.btn.btn-default{ href: "#"} Redigér
							%a.link-format-panel.btn.btn-primary{ href: "#" } Vis formateret
							#edit-panel.well{ style: "margin-top: 10px"}
								%textarea{ class:"form-control", id:"message_body", name: "message[body]"}
								%span.small
									skriv {{jobbet}} hvis du vil nævne jobbet, og brug
									%a{ href: "https://en.wikipedia.org/wiki/Markdown", target: "_blank"} Markdown
									til at formatere teksten

							#format-panel.well{ style: "margin-top: 10px"}

				.modal-footer
					%button.btn.btn-default{ type:"button", :"data-dismiss"=>"modal"} Fortryd
					%button.btn.btn-primary{ type:"button", id: "send_message"} Send


	:coffeescript

		jobber_id = null

		$('a.park_jobber').on 'click', (e) ->
			jobber_id= $(this).data('jobber-id')
			elem = e.target
			$('parkModal').modal()
			name = $(elem).closest('h4').text()
			$('#parkModal').find('.modal-title').text('Parkér ' + name)

		$('#set_parkometer').on 'click', (e) ->
			url = '/jobbers/' + jobber_id + '/park'
			data = { until_at: $('input.park-until').val() }

			park_request = $.ajax
				url: url,
				data: data,
				type: "get"

			# callback handler that will be called on success
			park_request.done (response, textStatus, jqXHR) ->
				$("li#jobber_item_"+jobber_id).next('.list-group-separator').remove()
				$("li#jobber_item_"+jobber_id).remove()
				$('#parkModal').modal('hide')


		$('.checkbox.confirmation input').on 'click', () ->
			jobber_id=$(this).val()
			url = '/jobbers/' + jobber_id + '/confirmation'
			confirmation_request = $.ajax
				url: url,
				type: "get"

			# callback handler that will be called on success
			confirmation_request.done (response, textStatus, jqXHR) ->
				$('#jobber_col1_'+jobber_id).removeClass('checkbox.').removeClass('confirmation').removeClass('row-action-primary')
				$('#jobber_col1_'+jobber_id).addClass('row-picture').html(response)

			confirmation_request.always () ->
				console.log 'done'

		$('a.link-edit-panel').on 'click', () ->
			$('#edit-panel').show()
			$('#format-panel').hide()

		$('a.link-format-panel').on 'click', () ->
			$('#edit-panel').hide()
			$('#format-panel').show()
			request = $.ajax
				url: '/messages/format',
				type: "get",
				data: $('#message_body').serialize()

			# callback handler that will be called on success
			request.done (response, textStatus, jqXHR) ->
				$('#format-panel').html(response)

		newMessage = () ->
			$form = $('#newMessage')
			# let's select and cache all the fields
			$inputs = $form.find "input, select, button, textarea"

			# serialize the data in the form
			serializedData = $inputs.serialize()

			# let's disable the inputs for the duration of the ajax request
			# Note: we disable elements AFTER the form data has been serialized.
			# Disabled form elements will not be serialized.
			$inputs.prop("disabled", true)

			# fire off the request to the server
			request = $.ajax
				url: '/messages.js',
				type: "post",
				data: serializedData

			# callback handler that will be called on success
			request.done (response, textStatus, jqXHR) ->
				# log a message to the console
				swal "Perfekt!", "Der er sendt en besked :)", 'success'

			# callback handler that will be called on failure
			request.fail (jqXHR, textStatus, errorThrown) ->
				# log the error to the console
				swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'

			# callback handler that will be called regardless
			# if the request failed or succeeded
			request.always () ->
				#reenable the inputs
				$('#newMessage').hide()
				$inputs.prop "disabled", false

		$('#newMessage').on 'show.bs.modal', (event) ->
			$('#format-panel').hide()
			button = $(event.relatedTarget)
			recipient = button.data('recipient')
			modal = $(this)
			modal.find('.modal-title').text('Ny besked til ' + recipient)
			modal.find('.modal-body input.msg-to').val(recipient)

		$('#send_message').on 'click', (e) ->
			newMessage()

		$('#jobberCard').on 'show.bs.modal', (event) ->
			button = $(event.relatedTarget)
			jobber_id = button.data('jobber-id')

			# fire off the request to the server
			request = $.ajax
				url: '/jobbers/' + jobber_id,
				type: "get",

			# callback handler that will be called on success
			request.done (response, textStatus, jqXHR) ->
				$('#jobberCard').find('.modal-body .well').html(response)

			# callback handler that will be called on failure
			request.fail (jqXHR, textStatus, errorThrown) ->
				# log the error to the console
				swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'

		#
		# respond to a form submit on the jobber card
		#
		$('#save_jobber').on 'click', () ->
			$form = $('#jobberCard')
			# let's select and cache all the fields
			$inputs = $form.find "input, select, button, textarea"

			# serialize the data in the form
			serializedData = $inputs.serialize()

			# let's disable the inputs for the duration of the ajax request
			# Note: we disable elements AFTER the form data has been serialized.
			# Disabled form elements will not be serialized.
			$inputs.prop("disabled", true)

			# fire off the request to the server
			request = $.ajax
				url: '/jobbers/'+jobber_id+'.js',
				type: "patch",
				data: serializedData

			# callback handler that will be called on success
			request.done (response, textStatus, jqXHR) ->
				# log a message to the console
				# swal "Perfekt!", "Der er sendt en besked :)", 'success'
				$('#jobberCard').modal('hide')
				show_updated_jobber()

			# callback handler that will be called on failure
			request.fail (jqXHR, textStatus, errorThrown) ->
				# log the error to the console
				# swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'
				$('#jobberCard').find('.modal-body .well').html(jqXHR.responseText)

			# callback handler that will be called regardless
			# if the request failed or succeeded
			request.always () ->
				#reenable the inputs
				$('#newMessage').hide()
				$inputs.prop "disabled", false


		$('#newCall').on 'show.bs.modal', (event) ->
			$('#format-panel').hide()
			button = $(event.relatedTarget)
			recipient = button.data('recipient')
			modal = $(this)
			modal.find('.modal-title').text('Ny besked til ' + recipient)
			modal.find('.modal-body input.msg-to').val(recipient)

		refreshJobber = (data) ->
			$elem = $('#jobber_item_' + jobber_id)
			$elem.find('h4').text(data.name)
			$elem.find('span.phone').text(data.phone_number)
			$elem.find('span.email').text(data.email)

		show_updated_jobber = () ->
			# fire off the request to the server
			url = '/jobbers/' + jobber_id + '.json'
			request = $.getJSON url

			# callback handler that will be called on success
			request.done (response, textStatus, jqXHR) ->
				refreshJobber(jqXHR.responseJSON)

			# callback handler that will be called on failure
			request.fail (jqXHR, textStatus, errorThrown) ->
				# log the error to the console
				swal "ØV!", "Noget er gået galt \n Fejlen: " + jqXHR.responseText + ' ' + errorThrown, 'error'


:javascript
	var jobs = new Bloodhound({
	  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
	  queryTokenizer: Bloodhound.tokenizers.whitespace,
	  limit: 25,
	  prefetch: '/jobs.json',
	  remote: '/jobs.json?q=%QUERY'
	});

	// kicks off the loading/processing of `local` and `prefetch`
	jobs.initialize();

	// passing in `null` for the `options` arguments will result in the default
	// options being used
	$('.typeahead').typeahead(null, {
	  name: 'jobs',
	  displayKey: 'name',
		templates: {
		    empty: [
		      '<div class="empty-message">',
		      'Der var ingen jobs, der matcher det indtastede!',
		      '</div>'
		    ].join('\n'),
		    suggestion: Handlebars.compile('<p><strong>{{name}}</strong> – {{id}}</p>')
		  },
	  // `ttAdapter` wraps the suggestion engine in an adapter that
	  // is compatible with the typeahead jQuery plugin
	  source: jobs.ttAdapter()
	});

	$('.typeahead').on('typeahead:selected', function(event, selection) {
		$('#message_job_offer_id').val(selection.id);
	});
